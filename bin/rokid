#!/usr/bin/env node

const path = require('path');
const fs = require('fs');
const program = require('commander');
const ADBKit = require('adbkit');
const ovs = require('../lib/ovs').getClient();
const version = require(`${path.join(__dirname, '../package.json')}`).version;

const bridge = ADBKit.createClient();

program.version(version);

program
  .command('devices')
  .description('列出所有已连接的若琪设备')
  .action(listDevice);

program
  .command('login <user> <pwd>')
  .description('登录Rokid账号，需要：用户名与密码')
  .action(async (username, password) => {
    try {
      await ovs.login(username, password);
      console.log('登录成功');
    } catch (err) {
      console.log('登录失败:', err.response.data.message);
    }
  });

program
  .command('domain <id>')
  .description('通过技能ID获取对应的意图配置')
  .action(async (id) => {
    const intents = await ovs.listIntents(id);
    intents.ZH.intents.forEach((intent) => {
      console.log(JSON.stringify(intent, null, 2));
    });
  });

program
  .command('skills')
  .description('列出你所有的技能ID及名称')
  .action(async () => {
    const skills = await ovs.listSkills();
    const outputs = skills.list.map((skill) => {
      return `${skill.appId}   ${skill.name}`;
    }).join('\n');
    console.log(outputs);
  });

program
  .command('compile')
  .description('上传以及编译你当前目前下intents.json配置到RokidNLP在线服务')
  .action(async () => {
    try {
      const appId = getLocalAppId();
      const intents = JSON.parse(fs.readFileSync('./intents.json', 'utf8'));
      await ovs.uploadIntents(appId, intents, true);
    } catch (err) {
      console.log(err);
      console.log(err.response.data);
    }
  });

program
  .command('test <sentence>')
  .description('在当前目录下发送测试命令（针对已编译的项目有效）')
  .action(async (sentence) => {
    const appId = getLocalAppId();
    const data = await ovs.testIntents(appId, sentence);
    console.log(JSON.parse(data.nlp));
  });

program.parse(process.argv);

async function listDevice() {
  const devices = await bridge.listDevices();
  devices.forEach((device) => {
    console.log(device.id + '    ' + device.type);
  })
}

function getLocalAppId() {
  const packageInfoExists = fs.existsSync('./package.json');
  if (!packageInfoExists) {
    return console.error('package.json 不存在');
  }
  const packageInfo = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
  const skillIds = packageInfo.metadata.skills;
  if (skillIds.length !== 1) {
    return console.error('目前只支持单技能操作')
  }
  return skillIds[0];
}
